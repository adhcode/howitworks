generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  firstName String
  lastName  String
  role      UserRole
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  investor  Investor?
  realtor   Realtor?
}

model Realtor {
  id                 String       @id @default(uuid())
  userId             String       @unique
  phoneNumber        String?
  residentialAddress String?
  bankName           String?
  accountNumber      String?
  accountName        String?
  profileImage       String?
  slug               String       @unique
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  commissions        Commission[]
  leads              Lead[]
  properties         Property[]
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Investor {
  id                String       @id @default(uuid())
  userId            String       @unique
  phoneNumber       String?
  address           String?
  investmentBudget  Float?
  preferredLocation String?
  profileImage      String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  investments       Investment[]
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  inquiries         Lead[]       @relation("InvestorInquiries")
}

model Property {
  id             String       @id @default(uuid())
  title          String
  description    String?
  price          Float
  location       String
  bedrooms       Int?
  bathrooms      Int?
  area           Float?
  propertyType   String
  listingType    String       @default("sale") // sale, rent, investment
  status         String       @default("active")
  featured       Boolean      @default(false)
  images         String[]
  realtorId      String?
  commissionRate Float?       @default(3.0) // Percentage (e.g., 3.0 = 3%)
  commissionType String?      @default("percentage") // "percentage" or "fixed"
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  commissions    Commission[]
  investments    Investment[]
  leads          Lead[]
  realtor        Realtor?     @relation(fields: [realtorId], references: [id], onDelete: SetNull)
}

model Lead {
  id          String       @id @default(uuid())
  name        String
  email       String
  phone       String?
  message     String?
  status      String       @default("new")
  source      String?
  propertyId  String?
  realtorId   String?
  investorId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  commissions Commission[]
  investor    Investor?    @relation("InvestorInquiries", fields: [investorId], references: [id])
  property    Property?    @relation(fields: [propertyId], references: [id])
  realtor     Realtor?     @relation(fields: [realtorId], references: [id], onDelete: SetNull)
}

model Investment {
  id             String   @id @default(uuid())
  investorId     String
  propertyId     String
  amount         Float
  investmentType String
  status         String   @default("pending")
  expectedReturn Float?
  investmentDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  investor       Investor @relation(fields: [investorId], references: [id], onDelete: Cascade)
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Commission {
  id              String    @id @default(uuid())
  client          String
  amount          Float
  status          String    @default("pending") // pending, approved, paid, rejected
  transactionDate DateTime
  realtorId       String
  propertyId      String?
  leadId          String?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lead            Lead?     @relation(fields: [leadId], references: [id])
  property        Property? @relation(fields: [propertyId], references: [id])
  realtor         Realtor   @relation(fields: [realtorId], references: [id], onDelete: Cascade)
}

model Blog {
  id            String   @id @default(uuid())
  title         String
  content       String
  excerpt       String?
  featuredImage String?
  slug          String   @unique
  published     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RealtorInvitation {
  id         String                    @id @default(uuid())
  email      String
  firstName  String
  lastName   String
  token      String                    @unique
  status     RealtorInvitationStatus   @default(PENDING)
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt
  expiresAt  DateTime
  acceptedAt DateTime?
}

enum UserRole {
  ADMIN
  REALTOR
  INVESTOR
}

enum RealtorInvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  FAILED
}
